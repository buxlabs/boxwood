const assert = require('assert')
const { extract } = require('./string')

assert.deepEqual(extract('foo'), [{ value: 'foo' }])
assert.deepEqual(extract('bar'), [{ value: 'bar' }])
assert.deepEqual(extract('{foo}'), [{ value: '{foo}' }])
assert.deepEqual(extract('{bar}'), [{ value: '{bar}' }])
assert.deepEqual(extract('foo bar'), [{ value: 'foo bar' }])
assert.deepEqual(extract('foo {bar}'), [{ value: 'foo ' }, { value: '{bar}' }])
assert.deepEqual(extract('{foo} bar'), [{ value: '{foo}' }, { value: ' bar' }])
assert.deepEqual(extract('{foo} {bar}'), [{ value: '{foo}' }, { value: ' ' }, { value: '{bar}' }])
assert.deepEqual(extract('foo bar {baz}'), [{ value: 'foo bar ' }, { value: '{baz}' }])
assert.deepEqual(extract('foo {bar} baz'), [{ value: 'foo ' }, { value: '{bar}' }, { value: ' baz' }])
assert.deepEqual(extract('foo     bar'), [{ value: 'foo bar' }])
assert.deepEqual(extract('   foo     bar    '), [{ value: 'foo bar' }])
assert.deepEqual(extract('foo-{bar}'), [{ value: 'foo-' }, { value: '{bar}' }])
assert.deepEqual(extract('{foo}-{bar}'), [{ value: '{foo}' }, { value: '-' }, { value: '{bar}' }])
assert.deepEqual(extract('{foo | uppercase}'), [{ value: '{foo}', modifiers: ['uppercase'] }])
assert.deepEqual(extract('{foo | uppercase | lowercase}'), [{ value: '{foo}', modifiers: ['uppercase', 'lowercase'] }])
assert.deepEqual(extract('{foo | uppercase | lowercase | truncate(25)}'), [{ value: '{foo}', modifiers: ['uppercase', 'lowercase', 'truncate(25)'] }])
assert.deepEqual(extract('{1}'), [{ value: '{1}' }])
assert.deepEqual(extract('{"foo"}'), [{ value: '{"foo"}' }])
assert.deepEqual(extract('{foo | monetize({ currency: "$", ending: false, space: false })}'), [{value: '{foo}', modifiers: ['monetize({ currency: "$", ending: false, space: false })']}])
assert.deepEqual(extract('{foo | bar({baz: 25}) | monetize({ currency: "$", ending: false, space: false })}'), [{value: '{foo}', modifiers: ['bar({baz: 25})', 'monetize({ currency: "$", ending: false, space: false })']}])
assert.deepEqual(extract('/foo/{bar | first}'), [{ value: '/foo/' }, { value: '{bar}', modifiers: ['first'] }])
